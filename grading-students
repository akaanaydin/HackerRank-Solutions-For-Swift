import Foundation

/*
 * Complete the 'gradingStudents' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY grades as parameter.
 */
 
/*************************CODE HERE*************************/
func gradingStudents(grades: [Int]) -> [Int] {
    var finalGrades = [Int]()
    
    for i in grades{
        var grade = i
        var nextMultiple = 0
        
        if grade == 0 || grade == 100 || grade < 38 {
            finalGrades.append(i)
        }else {
        
        while grade % 5 != 0 {
            grade += 1
            if grade % 5 == 0{
                nextMultiple = grade
                break
            }
        }
        
        if (nextMultiple - i) >= 3 || i % 5 == 0 {
            finalGrades.append(i)
        }else if (nextMultiple - i) < 3 {
            
            finalGrades.append(nextMultiple)
            
        }
        }
    }

    return finalGrades
    
}
/*************************CODE HERE*************************/


let stdout = ProcessInfo.processInfo.environment["OUTPUT_PATH"]!
FileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)
let fileHandle = FileHandle(forWritingAtPath: stdout)!

guard let gradesCount = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)
else { fatalError("Bad input") }

var grades = [Int]()

for _ in 1...gradesCount {
    guard let gradesItem = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)
    else { fatalError("Bad input") }

    grades.append(gradesItem)
}

guard grades.count == gradesCount else { fatalError("Bad input") }

let result = gradingStudents(grades: grades)

fileHandle.write(result.map{ String($0) }.joined(separator: "\n").data(using: .utf8)!)
fileHandle.write("\n".data(using: .utf8)!)

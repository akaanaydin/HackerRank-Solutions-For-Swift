import Foundation

/*
 * Complete the 'lonelyinteger' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY a as parameter.
 */

/*************************CODE HERE*************************/
func lonelyinteger(a: [Int]) -> Int {
        var aloneInteger = 0
        var duplicate = 0
        var duplicateArray = [Int]()
        
        for i in 0...a.count-1{
            var counter = i + 1
            
            while counter <= a.count-1{
                
                if a[i] == a[counter]{
                    duplicate += 1
                    duplicateArray.append(a[i])
                }
                counter += 1
            }
            
            if duplicateArray.contains(a[i]){
                duplicate = 0
            }else{
                aloneInteger = a[i]
                break
            }
        }
        
        return aloneInteger
}
/*************************CODE HERE*************************/


let stdout = ProcessInfo.processInfo.environment["OUTPUT_PATH"]!
FileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)
let fileHandle = FileHandle(forWritingAtPath: stdout)!

guard let n = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)
else { fatalError("Bad input") }

guard let aTemp = readLine()?.replacingOccurrences(of: "\\s+$", with: "", options: .regularExpression) else { fatalError("Bad input") }

let a: [Int] = aTemp.split(separator: " ").map {
    if let aItem = Int($0) {
        return aItem
    } else { fatalError("Bad input") }
}

guard a.count == n else { fatalError("Bad input") }

let result = lonelyinteger(a: a)

fileHandle.write(String(result).data(using: .utf8)!)
fileHandle.write("\n".data(using: .utf8)!)

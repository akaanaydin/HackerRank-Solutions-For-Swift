import Foundation

/*
 * Complete the 'flippingBits' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER n as parameter.
 */
 
 
/*************************CODE HERE*************************/
func flippingBits(n: Int) -> Int {
    
    func pad(string : String, toSize: Int) -> String {
        var padded = string
        for _ in 0..<(toSize - string.count) {
            padded = "0" + padded
        }
    return padded
    }
    
    var number = pad(string: String(n, radix: 2), toSize: 32)
    var numberArray = Array(number)

    for replace in 0...31 {

        if numberArray[replace] == "0" {
    
            numberArray[replace] = "1"
        
        }else{
    
            numberArray[replace] = "0"
    
        }
    }
    return Int(String(numberArray), radix: 2)!
}
/*************************CODE HERE*************************/

let stdout = ProcessInfo.processInfo.environment["OUTPUT_PATH"]!
FileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)
let fileHandle = FileHandle(forWritingAtPath: stdout)!

guard let q = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)
else { fatalError("Bad input") }

for qItr in 1...q {
    guard let n = Int((readLine()?.trimmingCharacters(in: .whitespacesAndNewlines))!)
    else { fatalError("Bad input") }

    let result = flippingBits(n: n)

    fileHandle.write(String(result).data(using: .utf8)!)
    fileHandle.write("\n".data(using: .utf8)!)
}
